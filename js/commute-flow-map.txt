

// http://docs.geoserver.org/latest/en/user/tutorials/cql/cql_tutorial.html
// http://docs.geoserver.org/latest/en/user/services/wms/vendor.html#wms-vendor-parameters
// http://docs.geoserver.org/latest/en/user/filter/ecql_reference.html#ecql-cond
// http://docs.geoserver.org/latest/en/user/tutorials/cql/cql_tutorial.html#cql-tutorial
// http://docs.geoserver.org/latest/en/user/filter/function_reference.html#filter-function-reference


// TMS
// http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/service/tms/1.0.0/
// http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/service/tms/1.0.0/commute-flow%3Amsoa_qc-epsg-3857@EPSG%3A900913@png
//
// http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/demo/commute-flow:msoa_qc-epsg-3857
// var tms_ne = L.tileLayer('http://demo.opengeo.org/geoserver/gwc/service/tms/1.0.0/ne:ne@EPSG:900913@png/{z}/{x}/{y}.png', {
// var tms_cf = L.tileLayer('http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/service/tms/1.0.0/commute-flow%3Amsoa_qc-epsg-3857/{z}/{x}/{y}.png', {
// var tms_cf = L.tileLayer('http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/demo/commute-flow:msoa_qc-epsg-3857/{z}/{x}/{y}.png', {
// var tms_msoa = L.tileLayer('http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/service/tms/1.0.0/commute-flow%3Amsoa_qc-epsg-3857@EPSG%3A900913@png/{z}/{x}/{y}.png', {

//GeoJSON
// http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=commute-flow:commute-flow-thin-11-epsg-3857&maxFeatures=50&outputFormat=application%2Fjson
// commute-flow:commute-flow-thin-11-epsg-3857

//http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=commute-flow:commute-flow-thin-1_epsg_4326&maxFeatures=50&outputFormat=application%2Fjson

// %3A
//
// http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=commute-flow:commute-flow-thin-epsg-4326&maxFeatures=50&outputFormat=application%2Fjson
//

// http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=commute-flow:commute-flow-thin-epsg-4326&cql_filter=rc=102003570&maxFeatures=50&outputFormat=application%2Fjson

// http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?
// service=WFS&
// version=1.0.0&
// request=GetFeature&
// typeName=commute-flow:commute-flow-thin-epsg-4326&
// cql_filter=rc=102003570
// maxFeatures=50&
// outputFormat=application%2Fjson


// WMS
// http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/wms?service=WMS&version=1.1.0&request=GetMap&layers=commute-flow:commute-flow-thin-11-epsg-3857&styles=&bbox=-702614.1557099737,6431689.32937009,194513.43191177133,7511610.446720975&width=638&height=768&srs=EPSG:3857&format=image%2Fpng
//
//var wmsLayer2 = L.tileLayer.wms('http://maps.humanities.manchester.ac.uk:8090/geoserver/ows?', {
//  layers: 'commute-flow:msoa-qc-epsg-3857',
//  format: 'image/png',
//  transparent: true,
//  //cql_filter: 'INTERSECTS(the_geom, Point (-266924 7402426))'
//  //cql_filter: 'INTERSECT(the_geom, POINT (52.7 -2))'
//}).addTo(map);
//
//var wmsLayer = L.tileLayer.wms('http://maps.humanities.manchester.ac.uk:8090/geoserver/ows?', {
//  layers: 'commute-flow:commute-flow-thin-1-epsg-3857',
//  format: 'image/png',
//  transparent: true,
//  styles: 'commute-flow-red-5',
//  cql_filter: 'rc=102003570'
//}).addTo(map);


//#1705d6
//1. Consumer Services
//1.1 Budding Sales Execs
//1.2 Established in Sales and Customer Care
//1.3 Back Office Functions
//1.4 Multicultural Hospitality
//1.5 On the Shop Floor
//
//#11ea44
//2. Typical Blue Collar Traits
//2.1 Multicultural Routine Logistics
//2.2 On the Production Line
//2.3 Skilled Trades in Mixed Economies
//
//#cc4704
//3. Sustainable Sorts
//3.1 Professionals Who Cycle
//3.2 Sustainable Hospitality
//3.3 Welfare Workers on the Bus
//3.4 Active Mixed Commuters
//3.5 All Aboard
//
//#6b2ed4
//4. Supporting Society
//4.1 Civic Duties
//4.2 Professional Support Services
//4.3 Young Clericals
//
//#d60003
//5. Friendly Faces
//5.1 Routine Care and Leisure
//5.2 Multicultural Workers in Welfare
//5.3 Mixed Roles in Hospitality
//5.4 Here to Help
//5.5 Established in Mixed Service Economies
//
//#23cfb8
//6. The Nurturers
//6.1 Early Career Educators
//6.2 Helping Hands in Education
//6.3 Supporting Health and Wellbeing
//6.4 Established Nurturers
//6.5 Health and Wellbeing Professionals
//
//#e1de00
//7. Traders, Movers and Makers
//7.1 Retail Relations
//7.2 Factory Settings
//7.3 Young Construction Crews
//7.4 Mixed Warehousing and Distribution
//7.5 Part-Time Traders, Movers and Makers
//
//#de079a
//8. High Flyers
//8.1 Mixed Mid-Career Professionals
//8.2 Managing the High Street
//8.3 Manufacturing Execs
//8.4 Early Career Professionals
//8.5 Aspiring Flyers
//
//#1fcd5f
//9. Techs and the City Types
//9.1 Early Career Innovators
//9.2 Administering the City
//9.3 Financial Execs
//9.4 Techs and Professionals in Welfare









var Spatial = {

  map: null,

  mapOptions: {
    center: [52.95, -2.8],
    zoom: 7,
    minZoom: 6,
    maxZoom: 18
  },

  vectorFlowsBaseUrl: 'http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?',
  vectorFlowsParametersUrl: 'service=WFS&version=1.0.0&request=GetFeature&typeName=',
  vectorFlowsFilterParameterUrl: '&cql_filter=rc = 102003570 AND g BETWEEN 20 AND 25',
  vectorFlowsOutputFormatParameterUrl: '&outputFormat=application/json',

  commuteFlowFilteredLayerName: 'commute-flow:commute-flow-thin-filtered-epsg-4326',
  commuteFlowLayerName: 'commute-flow:commute-flow-thin-epsg-4326',
  msoaLayerName: 'commute-flow:msoa-qc-epsg-3857',

  mapLayers: {
    OpenStreetMap: {
      index: 0,
      type: 'baseLayer',
      name: 'OpenStreetMap',
      mapLayer: null,
      url: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'
    },
    MSOAs: {index: 1, type: 'geoJSONLayer', name: 'MSOAs', mapLayer: null, geoJSON: null},
    MSOAsWithBaseMap: {index: 2, type: 'geoJSONLayer', name: 'MSOAs with OpenStreetMap', mapLayer: null, geoJSON: null},
    WmsFlows: {
      index: 3,
      type: 'wmsLayer',
      name: 'WMS Flows',
      mapLayer: null,
      url: 'http://maps.humanities.manchester.ac.uk:8090/geoserver/ows?'
    },
    HighlightedMSOA: {index: 4, type: 'geoJSONLayer', name: 'Highlighted MSOA', mapLayer: null, geoJSON: null},
    CommuteFlows: {index: 5, type: 'geoJSONLayer', name: 'Commute Flows', mapLayer: null, geoJSON: null},
    HighlightedFlow: {index: 6, type: 'geoJSONLayer', name: 'Highlighted Flow', mapLayer: null, geoJSON: null}
  },

  // TODO: Change max: 50
  commuteFlowsValues: {
    totalPersons: { min: 6, max: 50 /*1906*/, minWidth: 1, maxWidth: 10 }
  },

  dummyCommuteFlowJson: {
    type: "FeatureCollection",
    features: [
      {
        type: "Feature",
        geometry: {
          type: "LineString",
          coordinates: [
            [ [52.95, -2.80], [53.00, -2.85] ]
          ]
        },
        properties: {
          prop0: 0
        }
      }
    ]
  },

  dummyStyle: function(feature) {
    return {
      stroke: true,
      // color: '#000000',
      // color: '#141414',
      //color: '#282828',
      weight: 10,
      opacity: 1,
      fill: true,
      fillColor: '#F00',
      fillOpacity: 1,
      //lineCap: 'round',  // butt | round | square | inherit
      //lineJoin: 'round'  // miter | round | bevel | inherit
    }
  },

  msoaStyle: {
    stroke: true,
    // color: '#000000',
    // color: '#141414',
    color: '#282828',
    weight: 0.5,
    opacity: 1,
    fill: true,
    // fillColor: '#343434',
    fillColor: '#515151',
    fillOpacity: 1,
    //lineCap: 'round',  // butt | round | square | inherit
    //lineJoin: 'round'  // miter | round | bevel | inherit
  },

  msoaWithBaseMapStyle: {
    stroke: true,
    // color: '#000000',
    // color: '#141414',
    color: '#4169E1',
    weight: 0.5,
    opacity: 1,
    fill: true,
    // fillColor: '#343434',
    //fillColor: '#515151',
    fillOpacity: 0.01,
    //lineCap: 'round',  // butt | round | square | inherit
    //lineJoin: 'round'  // miter | round | bevel | inherit
  },

  highlightedMSOAStyle: {
    stroke: true,
    color: '#000',
    dashArray: '',
    weight: 5,
    opacity: 1,
    fillOpacity: 0.4
    //lineCap: 'round',  // butt | round | square | inherit
    //lineJoin: 'round'  // miter | round | bevel | inherit
  },

  highlightedMSOAWithBaseMapStyle: {
    stroke: true,
    color: '#4169E1',
    dashArray: '',
    weight: 5,
    opacity: 1,
    //fill: true,
    // fillColor: '#343434',
    //fillColor: '#515151',
    fillOpacity: 0.4,
    //lineCap: 'round',  // butt | round | square | inherit
    //lineJoin: 'round'  // miter | round | bevel | inherit
  },

  /**
   * Gets a commute flow layer name.
   *
   * @param  {number} group - The group code of the flows.
   * @param  {string} epsgCode - The EPSG code of the layer.
   */
  getCommuteFlowLayerName(group, epsgCode) {
    return 'commute-flow:commute-flow-thin-' + group + '-epsg-' + epsgCode;
  },

  /**
   * Initializes the map.
   */
  initializeMap() {

    Spatial.map = L.map('map', {
      center: Spatial.mapOptions.center,
      zoom: Spatial.mapOptions.zoom,
      minZoom: Spatial.mapOptions.minZoom,
      maxZoom: Spatial.mapOptions.maxZoom
    });

    Spatial.createOpenStreetMapBaseMapLayer();
    Spatial.createMSOAsLayer();
    Spatial.createMSOAsWithBaseMapLayer();

    Spatial.createCommuteFlowsMapLayer();

  },

  /**
   * Creates the Leaflet OpenStreetMap layer.
   */
  createOpenStreetMapBaseMapLayer() {
    Spatial.mapLayers.OpenStreetMap.mapLayer = L.tileLayer.grayscale('http://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Map data &copy; <a href="http://openstreetmap.org/">OpenStreetMap</a> contributors',
    });
  },

  /**
   * Creates the MSOAs layer.
   */
  createMSOAsLayer() {
    Spatial.mapLayers.MSOAs.geoJSON = msoaQcGeoJson;

    Spatial.mapLayers.MSOAs.mapLayer = L.geoJson(Spatial.mapLayers.MSOAs.geoJSON, {
      style: Spatial.msoaStyle,
      onEachFeature: function(feature, layer) {
        layer.on({
          mouseover: function() {
            layer.setStyle(Spatial.highlightedMSOAStyle);

            if (!L.Browser.ie && !L.Browser.opera) {
              layer.bringToFront();
            }

            Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();

            currentMsoaViewModel.updateView(feature.properties.CODE, feature.properties.MSOA11NM, feature.properties.MSOA11NMW);
          },
          mouseout: function() {
            Spatial.mapLayers.MSOAs.mapLayer.resetStyle(layer);
            Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();

            currentMsoaViewModel.updateView(null, '', '');
          },
          click: function() {
            var rc = feature.properties.CODE;
            var groups = '';

            if (checkedGroupsViewModel.checkedGroups.length != 9 && checkedGroupsViewModel.checkedGroups.length != 0) {
              // Not all groups have been selected.
              var groupsArray = [];

              for (i = 0; i < checkedGroupsViewModel.checkedGroups.length; i++) {
                var gn = checkedGroupsViewModel.checkedGroups[i];
                groupsArray.push(gn * 10 + 1);
                groupsArray.push(gn * 10 + 2);
                groupsArray.push(gn * 10 + 3);
                groupsArray.push(gn * 10 + 4);
                groupsArray.push(gn * 10 + 5);
              }

              var inSequence = '';

              for (i = 0; i < groupsArray.length - 1; i++) {
                var gs = groupsArray[i];
                inSequence += gs + ', ';
              }

              var gs = groupsArray[groupsArray.length - 1];

              inSequence += gs;

              groups = ' AND g IN (' + inSequence + ')';
            }

            Spatial.vectorFlowsFilterParameterUrl = '&cql_filter=rc = ' + rc + groups;


            getFlowsExt(Spatial.commuteFlowFilteredLayerName);


            //F.execute(API.getFlows(Spatial.commuteFlowFilteredLayerName)).then(Spatial.renderCommuteFlowsMapLayer(F.result));





            //Spatial.vectorFlowsFilterParameterUrl = '&cql_filter=rc = 102003570 AND g BETWEEN 20 AND 25';

            //vectorFilterUrl = "&cql_filter=rc=" + rc;
            //getFlows(0);
          },
          dblclick: function() {
            Spatial.map.fitBounds(layer.getBounds());
          }
        });
      }
      // onEachFeature: function(feature, layer) {
      //   var popupDiv = '<div><table><tbody>' +
      //                  '<tr><th>Primary Key: </th><td>' + feature.properties.MSOA11NM + '</td></tr>' +
      //                  '<tr><th>Residential Code: </th><td>' + feature.properties.MSOA11NMW + '</td></tr>' +
      //                  '<tr><th>Workplace Code: </th><td>' + feature.properties.CODE + '</td></tr>' +
      //                  '</tbody></table></div>';

      //   layer.bindPopup(popupDiv);
      // }
      // filter: function(feature, layer) {
      //   return feature.properties.rc == 102003570;
      // }
    });

    Spatial.mapLayers.MSOAs.mapLayer.addTo(Spatial.map);
    Spatial.mapLayers.MSOAs.mapLayer.bringToFront();
  },


  createMSOAsLayerTest() {
    Spatial.mapLayers.MSOAs.geoJSON = msoaQcGeoJson;

    Spatial.mapLayers.MSOAs.mapLayer = L.geoJson(Spatial.mapLayers.MSOAs.geoJSON, {
      style: Spatial.msoaStyle,
      onEachFeature: function(feature, layer) {
        layer.on({
          mouseover: function() {
            layer.setStyle(Spatial.highlightedMSOAStyle);

            if (!L.Browser.ie && !L.Browser.opera) {
              layer.bringToFront();
            }

            Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();

            currentMsoaViewModel.updateView(feature.properties.CODE, feature.properties.MSOA11NM, feature.properties.MSOA11NMW);
          },
          mouseout: function() {
            Spatial.mapLayers.MSOAs.mapLayer.resetStyle(layer);
            Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();

            currentMsoaViewModel.updateView(null, '', '');
          },
          click: function() {
            var rc = feature.properties.CODE;
            var groups = '';

            if (checkedGroupsViewModel.checkedGroups.length != 9 && checkedGroupsViewModel.checkedGroups.length != 0) {
              // Not all groups have been selected.
              var groupsArray = [];

              for (i = 0; i < checkedGroupsViewModel.checkedGroups.length; i++) {
                var gn = checkedGroupsViewModel.checkedGroups[i];
                groupsArray.push(gn * 10 + 1);
                groupsArray.push(gn * 10 + 2);
                groupsArray.push(gn * 10 + 3);
                groupsArray.push(gn * 10 + 4);
                groupsArray.push(gn * 10 + 5);
              }

              var inSequence = '';

              for (i = 0; i < groupsArray.length - 1; i++) {
                var gs = groupsArray[i];
                inSequence += gs + ', ';
              }

              var gs = groupsArray[groupsArray.length - 1];

              inSequence += gs;

              groups = ' AND g IN (' + inSequence + ')';
            }

            Spatial.vectorFlowsFilterParameterUrl = '&cql_filter=rc = ' + rc + groups;


            API.getCommuteFlows(Spatial.commuteFlowFilteredLayerName);
            //getFlowsExt(Spatial.commuteFlowFilteredLayerName);


            //F.execute(API.getFlows(Spatial.commuteFlowFilteredLayerName)).then(Spatial.renderCommuteFlowsMapLayer(F.result));


            //Spatial.vectorFlowsFilterParameterUrl = '&cql_filter=rc = 102003570 AND g BETWEEN 20 AND 25';

            //vectorFilterUrl = "&cql_filter=rc=" + rc;
            //getFlows(0);
          },
          dblclick: function() {
            Spatial.map.fitBounds(layer.getBounds());
          }
        });
      }
      // onEachFeature: function(feature, layer) {
      //   var popupDiv = '<div><table><tbody>' +
      //                  '<tr><th>Primary Key: </th><td>' + feature.properties.MSOA11NM + '</td></tr>' +
      //                  '<tr><th>Residential Code: </th><td>' + feature.properties.MSOA11NMW + '</td></tr>' +
      //                  '<tr><th>Workplace Code: </th><td>' + feature.properties.CODE + '</td></tr>' +
      //                  '</tbody></table></div>';

      //   layer.bindPopup(popupDiv);
      // }
      // filter: function(feature, layer) {
      //   return feature.properties.rc == 102003570;
      // }
    });

    Spatial.mapLayers.MSOAs.mapLayer.addTo(Spatial.map);
    Spatial.mapLayers.MSOAs.mapLayer.bringToFront();
  },





  /**
   * Creates the MSOAs layer that will is used when the OpenStreetMap is visible.
   */
  createMSOAsWithBaseMapLayer() {
    Spatial.mapLayers.MSOAsWithBaseMap.geoJSON = msoaQcGeoJson;

    // TODO: Should this be used ?? L.geoJson(Spatial.mapLayers.MSOAs.geoJSON instead of: Spatial.mapLayers.MSOAsWithBaseMap.GeoJson
    Spatial.mapLayers.MSOAsWithBaseMap.mapLayer = L.geoJson(Spatial.mapLayers.MSOAsWithBaseMap.geoJSON, {
      style: Spatial.msoaWithBaseMapStyle,
      onEachFeature: function(feature, layer) {
        layer.on({
          mouseover: function() {
            layer.setStyle(Spatial.highlightedMSOAWithBaseMapStyle);

            if (!L.Browser.ie && !L.Browser.opera) {
              layer.bringToFront();
            }

            Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();

            currentMsoaViewModel.updateView(feature.properties.CODE, feature.properties.MSOA11NM, feature.properties.MSOA11NMW);
          },
          mouseout: function() {
            Spatial.mapLayers.MSOAsWithBaseMap.mapLayer.resetStyle(layer);
            Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();

            currentMsoaViewModel.updateView(null, '', '');
          },
          click: function() {
            var rc = feature.properties.CODE;
            var groups = '';

            if (checkedGroupsViewModel.checkedGroups.length != 9 && checkedGroupsViewModel.checkedGroups.length != 0) {
              // Not all groups have been selected.
              var groupsArray = [];

              for (i = 0; i < checkedGroupsViewModel.checkedGroups.length; i++) {
                var gn = checkedGroupsViewModel.checkedGroups[i];
                groupsArray.push(gn * 10 + 1);
                groupsArray.push(gn * 10 + 2);
                groupsArray.push(gn * 10 + 3);
                groupsArray.push(gn * 10 + 4);
                groupsArray.push(gn * 10 + 5);
              }

              var inSequence = '';

              for (i = 0; i < groupsArray.length - 1; i++) {
                var gs = groupsArray[i];
                inSequence += gs + ', ';
              }

              var gs = groupsArray[groupsArray.length - 1];

              inSequence += gs;

              groups = ' AND g IN (' + inSequence + ')';
            }

            Spatial.vectorFlowsFilterParameterUrl = '&cql_filter=rc = ' + rc + groups;


            getFlowsExt(Spatial.commuteFlowFilteredLayerName);


            //F.execute(API.getFlows(Spatial.commuteFlowFilteredLayerName)).then(Spatial.renderCommuteFlowsMapLayer(F.result));





            //Spatial.vectorFlowsFilterParameterUrl = '&cql_filter=rc = 102003570 AND g BETWEEN 20 AND 25';

            //vectorFilterUrl = "&cql_filter=rc=" + rc;
            //getFlows(0);
          },
          //  click: function() {
          //    var rc = feature.properties.CODE;
          //    vectorFilterUrl = "&cql_filter=rc=" + rc;
          //    getFlows(0);
          //  },
          dblclick: function() {
            Spatial.map.fitBounds(layer.getBounds());
          }
        });
      }
      // onEachFeature: function(feature, layer) {
      //   var popupDiv = '<div><table><tbody>' +
      //                  '<tr><th>Primary Key: </th><td>' + feature.properties.MSOA11NM + '</td></tr>' +
      //                  '<tr><th>Residential Code: </th><td>' + feature.properties.MSOA11NMW + '</td></tr>' +
      //                  '<tr><th>Workplace Code: </th><td>' + feature.properties.CODE + '</td></tr>' +
      //                  '</tbody></table></div>';

      //   layer.bindPopup(popupDiv);
      // }
      // filter: function(feature, layer) {
      //   return feature.properties.rc == 102003570;
      // }
    });
  },

  createCommuteFlowsMapLayer: function() {
    Spatial.mapLayers.CommuteFlows.geoJSON = Spatial.dummyCommuteFlowJson;

    Spatial.mapLayers.CommuteFlows.mapLayer = L.geoJson(Spatial.mapLayers.CommuteFlows.geoJSON, {
      style: function(feature) {
        return {
          stroke: true,
          color: '#e31a1c',
          weight: 5,
          opacity: 1
        }
      },
      onEachFeature: function(feature, layer) {
        var popupDiv = '<div><table><tbody>' +
                       '<tr><th>Primary Key: </th><td>' + feature.properties.pk + '</td></tr>' +
                       '<tr><th>Residential Code: </th><td>' + feature.properties.rc + '</td></tr>' +
                       '<tr><th>Workplace Code: </th><td>' + feature.properties.wc + '</td></tr>' +
                       '<tr><th>Total Persons: </th><td>' + feature.properties.tp + '</td></tr>' +
                       '<tr><th>Group: </th><td>' + feature.properties.g + '</td></tr>' +
                       '<tr><th>QCL Distance: </th><td>' + feature.properties.qd + '</td></tr>' +
                       '<tr><th>MSOA Distance (km): </th><td>' + feature.properties.md + '</td></tr>' +
                       '</tbody></table></div>';

        layer.bindPopup(popupDiv);
      } /*,
      filter: function(feature, layer) {
        return feature.properties.rc == 102003570;
      }*/
    });

    Spatial.mapLayers.CommuteFlows.mapLayer.addTo(Spatial.map);
    Spatial.mapLayers.CommuteFlows.mapLayer.bringToFront();
  },

  renderCommuteFlowsMapLayer: function(geoJson) {

    Spatial.mapLayers.CommuteFlows.geoJSON = geoJson;

    Spatial.mapLayers.CommuteFlows.geoJSON.features.sort(function(a, b) {
      if (a.properties.tp > b.properties.tp) {
        return -1;
      }
      if (a.properties.tp < b.properties.tp) {
        return 1;
      }
      return 0;
    });

    Spatial.mapLayers.CommuteFlows.mapLayer.clearLayers();

    if (Spatial.mapLayers.CommuteFlows.geoJSON.features.length != 0) {
      Spatial.mapLayers.CommuteFlows.mapLayer.addData(Spatial.mapLayers.CommuteFlows.geoJSON);

      Spatial.mapLayers.CommuteFlows.mapLayer.setStyle(function(feature) {

        var flowStyle = {
          stroke: true,
          opacity: 0.6
        };

        switch(feature.properties.g) {
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
            flowStyle.color = '#1705d6';
            break;
          case 21:
          case 22:
          case 23:
            flowStyle.color = '#11ea44';
            break;
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
            flowStyle.color = '#cc4704';
            break;
          case 41:
          case 42:
          case 43:
            flowStyle.color = '#6b2ed4';
            break;
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
            flowStyle.color = '#d60003';
            break;
          case 61:
          case 62:
          case 63:
          case 64:
          case 65:
            flowStyle.color = '#23cfb8';
            break;
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
            flowStyle.color = '#e1de00';
            break;
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
            flowStyle.color = '#de079a';
            break;
          case 91:
          case 92:
          case 93:
          case 94:
            flowStyle.color = '#de079a';
            break;
        }

        var w = Spatial.commuteFlowsValues.totalPersons.minWidth
                 +
                (feature.properties.tp - Spatial.commuteFlowsValues.totalPersons.min)
                 *
                (Spatial.commuteFlowsValues.totalPersons.maxWidth - Spatial.commuteFlowsValues.totalPersons.minWidth)
                 /
                (Spatial.commuteFlowsValues.totalPersons.max - Spatial.commuteFlowsValues.totalPersons.min);

        flowStyle.weight = w;

        return flowStyle;

      });

      Spatial.mapLayers.CommuteFlows.mapLayer.eachLayer(function(feature, layer) {
        var popupDiv = '<div><table><tbody>' +
          '<tr><th>Primary Key: </th><td>' + feature.properties.pk + '</td></tr>' +
          '<tr><th>Residential Code: </th><td>' + feature.properties.rc + '</td></tr>' +
          '<tr><th>Workplace Code: </th><td>' + feature.properties.wc + '</td></tr>' +
          '<tr><th>Total Persons: </th><td>' + feature.properties.tp + '</td></tr>' +
          '<tr><th>Group: </th><td>' + feature.properties.g + '</td></tr>' +
          '<tr><th>QCL Distance: </th><td>' + feature.properties.qd + '</td></tr>' +
          '<tr><th>MSOA Distance (km): </th><td>' + feature.properties.md + '</td></tr>' +
          '</tbody></table></div>';

        layer.bindPopup(popupDiv);
      });
    }

  },

  /**
   * Toggles the OpenStreetMap BaseMap layer on/off.
   */
  toggleOpenStreetMapBaseMapLayer(baseMapValue) {

    if (baseMapValue == 'OpenStreetMap') {
      Spatial.map.removeLayer(Spatial.mapLayers.MSOAs.mapLayer);
      Spatial.mapLayers.MSOAsWithBaseMap.mapLayer.addTo(Spatial.map);
      //Spatial.mapLayers.MSOAsWithBaseMap.mapLayer.bringToBack();

      Spatial.mapLayers.OpenStreetMap.mapLayer.addTo(Spatial.map);
      Spatial.mapLayers.OpenStreetMap.mapLayer.bringToBack();
    }
    else {
      Spatial.map.removeLayer(Spatial.mapLayers.MSOAsWithBaseMap.mapLayer);
      Spatial.mapLayers.MSOAs.mapLayer.addTo(Spatial.map);
      //Spatial.mapLayers.MSOAs.mapLayer.bringToBack();

      Spatial.map.removeLayer(Spatial.mapLayers.OpenStreetMap.mapLayer);
    }

  }

};

var API = {

  /**
   * Gets the commute flows from the remote server.
   *
   * @param lyrName - The name of the layer.
   */
  getCommuteFlows: function(lyrName) {

    var url = Spatial.vectorFlowsBaseUrl +
      Spatial.vectorFlowsParametersUrl +
      lyrName +
      Spatial.vectorFlowsFilterParameterUrl +
      Spatial.vectorFlowsOutputFormatParameterUrl;

    $.ajax({
      url: url,
      type: 'GET',
      crossDomain: true,
      dataType: 'json',
      success: function(result) {
        Spatial.renderCommuteFlowsMapLayer(result);
      },
      error: function(xhr, status, error) {
        alert(
          'An error has occured while getting commute flows' + '\r\n\r\n' +
          'Status: ' + status + '\r\n' +
          'Message: ' + error.message + '\r\n\r\n'
        );
      }
    });

  }

};











var baseMapViewModel = new Vue({
  el: '#toggleBaseMapCheckBox',
  data: {
    baseMapLayerName: 'OpenStreetMap Basemap',
    baseMapValue: 'none'
  },
  methods: {
    toggleBaseMap: function() {
      if (this.baseMapValue == 'none') {
        this.baseMapValue = 'OpenStreetMap';
      }
      else {
        this.baseMapValue = 'none';
      }

      Spatial.toggleOpenStreetMapBaseMapLayer(this.baseMapValue);
    }
  }
})

var checkedGroupsViewModel = new Vue({
  el: '#checkedGroups',
  data: {
    checkedGroups: []
  },
  methods: {
    selectAllGroups: function() {
      this.checkedGroups = [ '1', '2', '3', '4', '5', '6', '7', '8', '9' ];
    }
  }
})

var currentMsoaViewModel = new Vue({
  el: '#currentMsoaCallout',
  data: {
    currentMsoaCode: 0,
    currentMsoa11Nm: '',
    currentMsoa11NmW: ''
  },
  methods: {
    updateView: function(code, nm, nmw) {
      this.currentMsoaCode = code;
      this.currentMsoa11Nm = nm;
      this.currentMsoa11NmW = nmw;
    }
  }
})




// ================================================================================

Spatial.initializeMap();

// ================================================================================




//
//<!-- method handler -->
//<button v-on:click="doThis"></button>
//
//  <!-- inline statement -->
//<button v-on:click="doThat('hello', $event)"></button>
//
//  <!-- shorthand -->
//  <button @click="doThis"></button>
//
//  <!-- stop propagation -->
//<button @click.stop="doThis"></button>
//
//  <!-- prevent default -->
//<button @click.prevent="doThis"></button>
//
//  <!-- prevent default without expression -->
//<form @submit.prevent></form>
//
//<!-- chain modifiers -->
//<button @click.stop.prevent="doThis"></button>
//
//  <!-- key modifier using keyAlias -->
//<input @keyup.enter="onEnter">
//
//  <!-- key modifier using keyCode -->
//<input @keyup.13="onEnter">










//
//
//var tmsBaseUrl = 'http://maps.humanities.manchester.ac.uk:8090/geoserver/gwc/service/tms/1.0.0/';
//var tmsTail = '@EPSG:900913@png/{z}/{x}/{y}.png';
//
//var vectorBaseUrl = 'http://maps.humanities.manchester.ac.uk:8090/geoserver/commute-flow/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=';
//var vectorFilterUrl = "&cql_filter=rc = 102003570 AND g BETWEEN 20 AND 25";
//var vectorTail = '&outputFormat=application/json';
//
//var vectorLayers = [
//  { index: 0,  key: 'commute flow',    name: 'commute-flow:commute-flow-thin-epsg-4326',    geoJSON: null, layer: null },
//  { index: 1,  key: 'commute flow 1',  name: 'commute-flow:commute-flow-thin-1-epsg-4326',  geoJSON: null, layer: null },
//  { index: 11, key: 'commute flow 11', name: 'commute-flow:commute-flow-thin-11-epsg-3857', geoJSON: null, layer: null },
//  { index: 12, key: 'commute flow 12', name: 'commute-flow:commute-flow-thin-12-epsg-3857', geoJSON: null, layer: null },
//  { index: 13, key: 'commute flow 13', name: 'commute-flow:commute-flow-thin-13-epsg-3857', geoJSON: null, layer: null },
//  { index: 2,  key: 'commute flow 2',  name: 'commute-flow:commute-flow-thin-2-epsg-3857',  geoJSON: null, layer: null },
//  { index: 21, key: 'commute flow 21', name: 'commute-flow:commute-flow-thin-21-epsg-3857', geoJSON: null, layer: null },
//  { index: 22, key: 'commute flow 22', name: 'commute-flow:commute-flow-thin-22-epsg-3857', geoJSON: null, layer: null },
//  { index: 23, key: 'commute flow 23', name: 'commute-flow:commute-flow-thin-23-epsg-3857', geoJSON: null, layer: null },
//  { index: 24, key: 'commute flow 24', name: 'commute-flow:commute-flow-thin-24-epsg-3857', geoJSON: null, layer: null },
//  { index: 25, key: 'commute flow 25', name: 'commute-flow:commute-flow-thin-25-epsg-3857', geoJSON: null, layer: null },
//  { index: 3,  key: 'commute flow 3',  name: 'commute-flow:commute-flow-thin-3-epsg-3857',  geoJSON: null, layer: null },
//  { index: 31, key: 'commute flow 31', name: 'commute-flow:commute-flow-thin-31-epsg-3857', geoJSON: null, layer: null },
//  { index: 32, key: 'commute flow 32', name: 'commute-flow:commute-flow-thin-32-epsg-3857', geoJSON: null, layer: null },
//  { index: 33, key: 'commute flow 33', name: 'commute-flow:commute-flow-thin-33-epsg-3857', geoJSON: null, layer: null },
//  { index: 4,  key: 'commute flow 4',  name: 'commute-flow:commute-flow-thin-4-epsg-3857',  geoJSON: null, layer: null },
//  { index: 41, key: 'commute flow 41', name: 'commute-flow:commute-flow-thin-41-epsg-3857', geoJSON: null, layer: null },
//  { index: 42, key: 'commute flow 42', name: 'commute-flow:commute-flow-thin-42-epsg-3857', geoJSON: null, layer: null },
//  { index: 43, key: 'commute flow 43', name: 'commute-flow:commute-flow-thin-43-epsg-3857', geoJSON: null, layer: null },
//  { index: 44, key: 'commute flow 44', name: 'commute-flow:commute-flow-thin-44-epsg-3857', geoJSON: null, layer: null },
//  { index: 5,  key: 'commute flow 5',  name: 'commute-flow:commute-flow-thin-5-epsg-3857',  geoJSON: null, layer: null },
//  { index: 51, key: 'commute flow 51', name: 'commute-flow:commute-flow-thin-51-epsg-3857', geoJSON: null, layer: null },
//  { index: 52, key: 'commute flow 52', name: 'commute-flow:commute-flow-thin-52-epsg-3857', geoJSON: null, layer: null },
//  { index: 53, key: 'commute flow 53', name: 'commute-flow:commute-flow-thin-53-epsg-3857', geoJSON: null, layer: null },
//  { index: 6,  key: 'commute flow 6',  name: 'commute-flow:commute-flow-thin-6-epsg-3857',  geoJSON: null, layer: null },
//  { index: 61, key: 'commute flow 61', name: 'commute-flow:commute-flow-thin-61-epsg-3857', geoJSON: null, layer: null },
//  { index: 62, key: 'commute flow 62', name: 'commute-flow:commute-flow-thin-62-epsg-3857', geoJSON: null, layer: null },
//  { index: 63, key: 'commute flow 63', name: 'commute-flow:commute-flow-thin-63-epsg-3857', geoJSON: null, layer: null },
//  { index: 64, key: 'commute flow 64', name: 'commute-flow:commute-flow-thin-64-epsg-3857', geoJSON: null, layer: null },
//  { index: 7,  key: 'commute flow 7',  name: 'commute-flow:commute-flow-thin-7-epsg-3857',  geoJSON: null, layer: null },
//  { index: 71, key: 'commute flow 71', name: 'commute-flow:commute-flow-thin-71-epsg-3857', geoJSON: null, layer: null },
//  { index: 72, key: 'commute flow 72', name: 'commute-flow:commute-flow-thin-72-epsg-3857', geoJSON: null, layer: null },
//  { index: 73, key: 'commute flow 73', name: 'commute-flow:commute-flow-thin-73-epsg-3857', geoJSON: null, layer: null },
//  { index: 74, key: 'commute flow 74', name: 'commute-flow:commute-flow-thin-74-epsg-3857', geoJSON: null, layer: null },
//  { index: 75, key: 'commute flow 75', name: 'commute-flow:commute-flow-thin-75-epsg-3857', geoJSON: null, layer: null },
//  { index: 8,  key: 'commute flow 8',  name: 'commute-flow:commute-flow-thin-8-epsg-3857',  geoJSON: null, layer: null },
//  { index: 81, key: 'commute flow 81', name: 'commute-flow:commute-flow-thin-81-epsg-3857', geoJSON: null, layer: null },
//  { index: 82, key: 'commute flow 82', name: 'commute-flow:commute-flow-thin-82-epsg-3857', geoJSON: null, layer: null },
//  { index: 83, key: 'commute flow 83', name: 'commute-flow:commute-flow-thin-83-epsg-3857', geoJSON: null, layer: null },
//  { index: 84, key: 'commute flow 84', name: 'commute-flow:commute-flow-thin-84-epsg-3857', geoJSON: null, layer: null },
//  { index: 9,  key: 'commute flow 9',  name: 'commute-flow:commute-flow-thin-9-epsg-3857',  geoJSON: null, layer: null },
//  { index: 91, key: 'commute flow 91', name: 'commute-flow:commute-flow-thin-91-epsg-3857', geoJSON: null, layer: null },
//  { index: 92, key: 'commute flow 92', name: 'commute-flow:commute-flow-thin-92-epsg-3857', geoJSON: null, layer: null },
//  { index: 93, key: 'commute flow 93', name: 'commute-flow:commute-flow-thin-93-epsg-3857', geoJSON: null, layer: null }
//];
//
//
//var map = L.map('map', {
//  //center: [54.3, -3],
//  center: [52.95, -2.8],
//  zoom: 7,
//  minZoom: 6,
//  maxZoom: 18
//});
//
//// for (var i = 0; i < vectorLayers.length; i++) {
////   vectorLayers[i].geoJSON = L.tileLayer(vectorBaseUrl + vectorLayers[i].name + vectorTail, {
////     tms: true
////   });
//// }
//
//
//// var msoaBaseMapLayer = L.tileLayer(tmsBaseUrl + 'commute-flow:msoa_qc-epsg-3857' + tmsTail, {
////   tms: true
//// }).addTo(map);
//
//var msoaBaseMapLayer = null;
//var layers = {};
//
//
//renderMsoaBaseMapLayer();
//getLayer(0);
////getLayer2(0);
//
//
///**
// * Renders the MSO base map layer.
// */
//function renderMsoaBaseMapLayer() {
//
//  msoaBaseMapLayer = L.geoJson(msoaQcGeoJson, {
//    style: function(feature) {
//      return {
//        stroke: true,
//        // color: '#000000',
//        // color: '#141414',
//        color: '#282828',
//        weight: 0.5,
//        opacity: 1,
//        fill: true,
//        // fillColor: '#343434',
//        fillColor: '#515151',
//        fillOpacity: 1,
//        //lineCap: 'round',  // butt | round | square | inherit
//        //lineJoin: 'round'  // miter | round | bevel | inherit
//
//      }
//    },
//    onEachFeature: function(feature, layer) {
//      layer.on({
//        mouseover: function() {
//          layer.setStyle({
//            weight: 5,
//            color: '#000',
//            dashArray: '',
//            fillOpacity: 0.4
//          });
//
//          if (!L.Browser.ie && !L.Browser.opera) {
//            layer.bringToFront();
//          }
//
//          vectorLayers[0].layer.bringToFront();
//        },
//        mouseout: function() {
//          msoaBaseMapLayer.resetStyle(layer);
//          vectorLayers[0].layer.bringToFront();
//        },
//        click: function() {
//          var rc = feature.properties.CODE;
//          vectorFilterUrl = "&cql_filter=rc=" + rc;
//          getFlows(0);
//        },
//        dblclick: function() {
//          map.fitBounds(layer.getBounds());
//        }
//      });
//    }
//    // onEachFeature: function(feature, layer) {
//    //   var popupDiv = '<div><table><tbody>' +
//    //                  '<tr><th>Primary Key: </th><td>' + feature.properties.MSOA11NM + '</td></tr>' +
//    //                  '<tr><th>Residential Code: </th><td>' + feature.properties.MSOA11NMW + '</td></tr>' +
//    //                  '<tr><th>Workplace Code: </th><td>' + feature.properties.CODE + '</td></tr>' +
//    //                  '</tbody></table></div>';
//
//    //   layer.bindPopup(popupDiv);
//    // }
//    // filter: function(feature, layer) {
//    //   return feature.properties.rc == 102003570;
//    // }
//  }).addTo(map);
//
//}
//
///**
// * Gets a layer.
// *
// * @param  {any} index - The index of the layer in the layers in vectorLayers.
// */
//function getLayer(index) {
//
//  var lyr = vectorLayers.filter(l => l.index == index)[0];
//
//  var url = vectorBaseUrl + lyr.name + vectorFilterUrl + vectorTail;
//
//  $.ajax({
//    url: url,
//    type: 'GET',
//    crossDomain: true,
//    dataType: 'json', // "xml", "json"
//    success: function(result) {
//
//      lyr.geoJSON = result;
//
//      renderLayer(lyr);
//
//      addLayerControl();
//
//    },
//    error: function(xhr, status, error) {
//
//      alert(
//        'An error has occured while getting layer' + '\r\n\r\n' +
//        'Status: ' + status + ' ' + error.status + ' ' + error.statusText + '\r\n' +
//        'Result:\r\n' + JSON.stringify(error.responseJSON)
//      );
//
//    }
//  });
//
//}
//
///**
// * Gets a layer.
// *
// * @param  {any} index - The index of th elayer in the layers in vectorLayers.
// */
//function getLayer2(index) {
//
//  var lyr = vectorLayers.filter(l => l.index == index)[0];
//
//  var url = vectorBaseUrl + lyr.name + vectorFilterUrl + vectorTail;
//
//  $.get(url, function(result, status) {
//
//    lyr.geoJSON = result;
//
//    renderLayer(lyr);
//
//    addLayerControl();
//
//  }).fail(function(error, status) {
//
//    alert(
//      'An error has occured while getting layer' + '\r\n\r\n' +
//      'Status: ' + status + ' ' + error.status + ' ' + error.statusText + '\r\n' +
//      'Result:\r\n' + JSON.stringify(error.responseJSON)
//    );
//
//  });
//
//};
//
///**
// * Gets flows
// *
// * @param  {any} index - The index of the layer in the layers in vectorLayers.
// */
//function getFlows(index) {
//
//  var lyr = vectorLayers.filter(l => l.index == index)[0];
//
//  var url = vectorBaseUrl + lyr.name + vectorFilterUrl + vectorTail;
//
//  $.ajax({
//    url: url,
//    type: 'GET',
//    crossDomain: true,
//    dataType: 'json', // "xml", "json"
//    success: function(result) {
//
//      lyr.geoJSON = result;
//
//      renderNewFlows(lyr);
//
//    },
//    error: function(xhr, status, error) {
//
//      alert(
//        'An error has occured while getting layer' + '\r\n\r\n' +
//        'Status: ' + status + ' ' + error.status + ' ' + error.statusText + '\r\n' +
//        'Result:\r\n' + JSON.stringify(error.responseJSON)
//      );
//
//    }
//  });
//
//}
//
///**
// * Renders the layer.
// *
// * @param  {any} vectorLayer - The vectorLayer used to render the layer.
// */
//function renderLayer(vectorLayer) {
//
//  vectorLayer.layer = L.geoJson(vectorLayer.geoJSON, {
//    style: function(feature) {
//      return {
//        stroke: true,
//        color: '#e31a1c',
//        weight: 5,
//        opacity: 1
//      }
//    },
//    onEachFeature: function(feature, layer) {
//      var popupDiv = '<div><table><tbody>' +
//                     '<tr><th>Primary Key: </th><td>' + feature.properties.pk + '</td></tr>' +
//                     '<tr><th>Residential Code: </th><td>' + feature.properties.rc + '</td></tr>' +
//                     '<tr><th>Workplace Code: </th><td>' + feature.properties.wc + '</td></tr>' +
//                     '<tr><th>Total Persons: </th><td>' + feature.properties.tp + '</td></tr>' +
//                     '<tr><th>Group: </th><td>' + feature.properties.g + '</td></tr>' +
//                     '<tr><th>QCL Distance: </th><td>' + feature.properties.qd + '</td></tr>' +
//                     '<tr><th>MSOA Distance (km): </th><td>' + feature.properties.md + '</td></tr>' +
//                     '</tbody></table></div>';
//
//      layer.bindPopup(popupDiv);
//    } /*,
//    filter: function(feature, layer) {
//      return feature.properties.rc == 102003570;
//    }*/
//  });
//
//  layers[vectorLayer.key] = vectorLayer.layer;
//
//}
//
///**
// * Renders the new flows.
// *
// * @param  {any} vectorLayer - The vectorLayer used to render the layer.
// */
//function renderNewFlows(vectorLayer) {
//
//  // vectorLayer.layer = L.geoJson(vectorLayer.geoJSON, {
//  //   style: function(feature) {
//  //     return {
//  //       stroke: true,
//  //       color: '#e31a1c',
//  //       weight: 5,
//  //       opacity: 1
//  //     }
//  //   },
//  //   onEachFeature: function(feature, layer) {
//  //     var popupDiv = '<div><table><tbody>' +
//  //                    '<tr><th>Primary Key: </th><td>' + feature.properties.pk + '</td></tr>' +
//  //                    '<tr><th>Residential Code: </th><td>' + feature.properties.rc + '</td></tr>' +
//  //                    '<tr><th>Workplace Code: </th><td>' + feature.properties.wc + '</td></tr>' +
//  //                    '<tr><th>Total Persons: </th><td>' + feature.properties.tp + '</td></tr>' +
//  //                    '<tr><th>Group: </th><td>' + feature.properties.g + '</td></tr>' +
//  //                    '<tr><th>QCL Distance: </th><td>' + feature.properties.qd + '</td></tr>' +
//  //                    '<tr><th>MSOA Distance (km): </th><td>' + feature.properties.md + '</td></tr>' +
//  //                    '</tbody></table></div>';
//
//  //     layer.bindPopup(popupDiv);
//  //   } /*,
//  //   filter: function(feature, layer) {
//  //     return feature.properties.rc == 102003570;
//  //   }*/
//  // });
//
//  // layers[vectorLayer.key] = vectorLayer.layer;
//
//
//  layers[vectorLayer.key].clearLayers();
//  layers[vectorLayer.key].addData(vectorLayer.geoJSON);
//
//  layers[vectorLayer.key].setStyle(function(feature) {
//    return {
//      stroke: true,
//      color: '#e31a1c',
//      weight: 5,
//      opacity: 1
//    }
//  });
//
//  layers[vectorLayer.key].eachLayer(function(feature, layer) {
//    var popupDiv = '<div><table><tbody>' +
//                   '<tr><th>Primary Key: </th><td>' + feature.properties.pk + '</td></tr>' +
//                   '<tr><th>Residential Code: </th><td>' + feature.properties.rc + '</td></tr>' +
//                   '<tr><th>Workplace Code: </th><td>' + feature.properties.wc + '</td></tr>' +
//                   '<tr><th>Total Persons: </th><td>' + feature.properties.tp + '</td></tr>' +
//                   '<tr><th>Group: </th><td>' + feature.properties.g + '</td></tr>' +
//                   '<tr><th>QCL Distance: </th><td>' + feature.properties.qd + '</td></tr>' +
//                   '<tr><th>MSOA Distance (km): </th><td>' + feature.properties.md + '</td></tr>' +
//                   '</tbody></table></div>';
//
//    layer.bindPopup(popupDiv);
//  });
//
//};
//
///**
// * Adds a layer control.
// */
//function addLayerControl() {
//
//  var osmBaseMapLayer = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//    tms: false
//  }); //.addTo(map);
//
//  var baseMaps = {
//    'MSOAs': msoaBaseMapLayer,
//    'OpenStreetMap': osmBaseMapLayer
//  };
//
//  L.control.layers(baseMaps, layers, { collapsed: false }).addTo(map);
//
//  map.on('overlayadd', function(e) {
//    e.layer.bringToFront();
//  });
//
//  map.on('overlayremove', function(e) {
//    e.layer.bringToFront();
//  });
//
//  map.on('baselayerchange', function(e) {
//    e.layer.bringToBack();
//  })
//
//}













